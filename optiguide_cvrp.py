# -*- coding: utf-8 -*-
"""optiguide-CVRP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T4yEXM2U-PhPpUobm4viC17a-wln-lkX
"""

from gurobipy import Model, GRB
import math

# OPTIGUIDE DATA CODE GOES HERE

# Customer demands (0 is depot)
demand = {
    0: 0,
    1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,
    10: 1,  # Selecting 10 customers for this example
}

# Coordinates for depot and customers
coordinates = {
    0: (764, 255), 1: (303, 588), 2: (445, 722), 3: (993, 860), 4: (34, 242),
    5: (900, 18), 6: (290, 21), 7: (395, 576), 8: (505, 589), 9: (838, 557),
    10: (756, 249),
}

vehicle_count = 5
vehicle_capacity = 4

selected_customers = list(range(11))
demand_small = {k: demand[k] for k in selected_customers}
coordinates_small = {k: coordinates[k] for k in selected_customers}

def euclidean(a, b):
    return round(math.hypot(coordinates_small[a][0] - coordinates_small[b][0],
                            coordinates_small[a][1] - coordinates_small[b][1]))

distance_small = {(i, j): euclidean(i, j)
                  for i in selected_customers for j in selected_customers if i != j}

# MODEL CREATION STARTS HERE
model = Model("CVRP_OptiGuide_Ready")

# Decision variables
x = model.addVars(distance_small.keys(), vtype=GRB.BINARY, name="x")
u = model.addVars(selected_customers, lb=0, ub=vehicle_capacity, vtype=GRB.CONTINUOUS, name="load")

# Constraints: Each customer must be visited exactly once
for j in selected_customers[1:]:
    model.addConstr(sum(x[i, j] for i in selected_customers if i != j) == 1, name=f"visit_in_{j}")
    model.addConstr(sum(x[j, k] for k in selected_customers if k != j) == 1, name=f"visit_out_{j}")

# Vehicles must depart from and return to depot
model.addConstr(sum(x[0, j] for j in selected_customers if j != 0) == vehicle_count, name="depot_departure")
model.addConstr(sum(x[i, 0] for i in selected_customers if i != 0) == vehicle_count, name="depot_return")

# Subtour elimination (MTZ)
for i in selected_customers[1:]:
    for j in selected_customers[1:]:
        if i != j:
            model.addConstr(u[i] - u[j] + vehicle_capacity * x[i, j] <= vehicle_capacity - demand_small[j],
                            name=f"subtour_{i}_{j}")

# Load limits
for i in selected_customers[1:]:
    model.addConstr(u[i] >= demand_small[i], name=f"minload_{i}")
    model.addConstr(u[i] <= vehicle_capacity, name=f"maxload_{i}")

# Objective: Minimize total distance
model.setObjective(sum(distance_small[i, j] * x[i, j] for i, j in distance_small), GRB.MINIMIZE)

# OptiGuide-compatible model reference
m = model  # This is necessary for OptiGuide

# OPTIGUIDE CONSTRAINT CODE GOES HERE
# For example: demand[3] *= 1.5 or vehicle_capacity = 5, etc.

# Solve the model
m.update()
m.optimize()

# Results
if m.status == GRB.OPTIMAL:
    print(f"✅ Optimal cost: {m.ObjVal:.2f}")
    for var in m.getVars():
        if var.X > 0.1:
            print(f"{var.VarName}: {var.X}")
else:
    print("❌ Not solved to optimality. Status:", m.status)