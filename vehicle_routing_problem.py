# -*- coding: utf-8 -*-
"""vehicle_routing_problem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iRuUvV5lKD4zWniPBCMpfmii9CelQi_i
"""

# --- OPTIGUIDE DATA CODE GOES HERE ---

from gurobipy import Model, GRB, quicksum

# Customer and demand data
customers = [0, 1, 2, 3, 4, 5, 6]  # 0 is depot
demand = {
    0: 0,
    1: 10,
    2: 15,
    3: 20,
    4: 25,
    5: 30,
    6: 35
}

# Vehicle capacity
vehicle_capacity = 100

# Distance matrix (symmetric)
distance = {
    (i, j): abs(i - j) * 10 for i in customers for j in customers if i != j
}

# Create Gurobi model
model = Model("CVRP")

# Decision variables: x[i,j] = 1 if vehicle travels from i to j
x = model.addVars(distance.keys(), vtype=GRB.BINARY, name="x")

# Subtour elimination variables
u = model.addVars(customers, vtype=GRB.CONTINUOUS, name="u")

# --- OPTIGUIDE CONSTRAINT CODE GOES HERE ---

# Each customer must be entered exactly once
for j in customers[1:]:
    model.addConstr(quicksum(x[i, j] for i in customers if i != j) == 1, name=f"enter_{j}")

# Each customer must be exited exactly once
for i in customers[1:]:
    model.addConstr(quicksum(x[i, j] for j in customers if i != j) == 1, name=f"exit_{i}")

# Depot flow balance
model.addConstr(quicksum(x[0, j] for j in customers if j != 0) == 1, name="depart_depot")
model.addConstr(quicksum(x[i, 0] for i in customers if i != 0) == 1, name="return_depot")

# Subtour elimination (MTZ)
for i in customers[1:]:
    for j in customers[1:]:
        if i != j:
            model.addConstr(u[i] - u[j] + vehicle_capacity * x[i, j] <= vehicle_capacity - demand[j],
                            name=f"subtour_{i}_{j}")

# Minimum load constraints (named for update support)
for i in customers[1:]:
    model.addConstr(demand[i] >= 0, name=f"minload_{i}")

# Objective: minimize total distance
model.setObjective(quicksum(distance[i, j] * x[i, j] for i, j in distance), GRB.MINIMIZE)

# Solve the model
model.optimize()
m = model

# Display results if optimal solution is found
if model.status == GRB.OPTIMAL:
    print(f"✅ Optimal solution found. Total cost: {model.ObjVal:.2f}")
    for v in model.getVars():
        if v.X > 0:
            print(f"{v.VarName}: {v.X}")
else:
    print("❌ No feasible solution found.")


# --- OptiGuide-style demand update function ---

def update_and_resolve(updated_demand: dict):
    """
    Update demand for specified customers, modify corresponding constraints, and re-optimize.
    """
    print("\n📌 Updating demand and solving the model...\n")
    for i in updated_demand:
        if i in demand:
            demand[i] = updated_demand[i]
            model.getConstrByName(f"minload_{i}").RHS = demand[i]
    model.optimize()
    if model.status == GRB.OPTIMAL:
        print(f"✅ New optimal solution. Total cost: {model.ObjVal:.2f}")
        for v in model.getVars():
            if v.X > 0:
                print(f"{v.VarName}: {v.X}")
    else:
        print("❌ No feasible solution found after update.")

