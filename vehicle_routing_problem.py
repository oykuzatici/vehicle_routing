# -*- coding: utf-8 -*-
"""vehicle_routing_problem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iRuUvV5lKD4zWniPBCMpfmii9CelQi_i
"""

# OPTIGUIDE DATA CODE GOES HERE

from gurobipy import Model, GRB, quicksum

customers = [0, 1, 2, 3, 4, 5, 6]

# Base demand values
base_demand = {
    0: 0,
    1: 10,
    2: 15,
    3: 20,
    4: 25,
    5: 30,
    6: 35
}

vehicle_count = 4
vehicle_capacity = 100

distance = {
    (i, j): abs(i - j) * 10 + 5
    for i in customers for j in customers if i != j
}

# Define updated demands with multiple changes
updated_demand = base_demand.copy()
updated_demand[2] = base_demand[2] * 1.40  # Customer 2 demand increases by 40%
updated_demand[6] = base_demand[6] * 0.35  # Customer 6 demand decreases by 65%

# OPTIGUIDE CONSTRAINT CODE GOES HERE

# Initialize the model anew to ensure consistency with updated demands
model = Model("CVRP")

x = model.addVars(distance.keys(), vtype=GRB.BINARY, name="x")
u = model.addVars(customers, vtype=GRB.CONTINUOUS, lb=0, name="u")

# Set objective function to minimize total travel distance
model.setObjective(quicksum(distance[i, j] * x[i, j] for i, j in distance), GRB.MINIMIZE)

# Each customer must be visited exactly once (inbound and outbound)
for j in customers[1:]:
    model.addConstr(quicksum(x[i, j] for i in customers if i != j) == 1, name=f"visit_in_{j}")
    model.addConstr(quicksum(x[j, k] for k in customers if k != j) == 1, name=f"visit_out_{j}")

# Number of vehicles leaving and returning to the depot equals vehicle count
model.addConstr(quicksum(x[0, j] for j in customers if j != 0) == vehicle_count, name="depot_departure")
model.addConstr(quicksum(x[i, 0] for i in customers if i != 0) == vehicle_count, name="depot_return")

# Subtour elimination and capacity constraints using updated demands
for i in customers[1:]:
    for j in customers[1:]:
        if i != j:
            model.addConstr(
                u[i] - u[j] + vehicle_capacity * x[i, j] <= vehicle_capacity - updated_demand[j],
                name=f"subtour_{i}_{j}"
            )

# Load bounds based on updated demands and vehicle capacity
for i in customers[1:]:
    model.addConstr(u[i] >= updated_demand[i], name=f"minload_{i}")
    model.addConstr(u[i] <= vehicle_capacity, name=f"maxload_{i}")

# Optimize the model
model.optimize()

m = model