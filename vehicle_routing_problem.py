# -*- coding: utf-8 -*-
"""vehicle_routing_problem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iRuUvV5lKD4zWniPBCMpfmii9CelQi_i
"""

from gurobipy import Model, GRB, quicksum

# --- OPTIGUIDE DATA CODE GOES HERE ---
# Define customers and their demands
customers = [0, 1, 2, 3, 4, 5, 6]
demand = {
    0: 0,    # depot (merkez)
    1: 10,
    2: 15,
    3: 20,
    4: 25,
    5: 30,
    6: 35
}

vehicle_count = 4         # Number of vehicles (araç sayısı)
vehicle_capacity = 60     # Capacity per vehicle (araç kapasitesi)

# Distance matrix (mesafe matrisi)
distance = {
    (i, j): abs(i - j) * 10 + 5
    for i in customers for j in customers if i != j
}

# --- OPTIGUIDE CONSTRAINT CODE GOES HERE ---
# Create CVRP optimization model
model = Model("CVRP")

# Decision variables
x = model.addVars(distance.keys(), vtype=GRB.BINARY, name="x")  # Route selection
u = model.addVars(customers, vtype=GRB.CONTINUOUS, lb=0, name="u")  # Load variable for subtour elimination

# Objective function: minimize total distance
model.setObjective(quicksum(distance[i, j] * x[i, j] for i, j in distance), GRB.MINIMIZE)

# Constraints
# Each customer must be visited exactly once (except depot)
for j in customers[1:]:
    model.addConstr(quicksum(x[i, j] for i in customers if i != j) == 1, name=f"visit_in_{j}")
    model.addConstr(quicksum(x[j, k] for k in customers if k != j) == 1, name=f"visit_out_{j}")

# Vehicle departure and return from depot constraints
model.addConstr(quicksum(x[0, j] for j in customers if j != 0) == vehicle_count, name="depot_departure")
model.addConstr(quicksum(x[i, 0] for i in customers if i != 0) == vehicle_count, name="depot_return")

# Subtour elimination constraints (MTZ)
for i in customers[1:]:
    for j in customers[1:]:
        if i != j:
            model.addConstr(
                u[i] - u[j] + vehicle_capacity * x[i, j] <= vehicle_capacity - demand[j],
                name=f"subtour_{i}_{j}"
            )

# Load limits
for i in customers[1:]:
    model.addConstr(u[i] >= demand[i], name=f"minload_{i}")
    model.addConstr(u[i] <= vehicle_capacity, name=f"maxload_{i}")

# --- Model optimization ---
model.optimize()
m = model

# --- Output results ---
if model.status == GRB.OPTIMAL:
    print(f"✅ Optimal toplam mesafe: {model.ObjVal}")
    for var in model.getVars():
        if var.X > 0.5 and "x" in var.VarName:
            print(f"{var.VarName} = 1")
else:
    print("❌ Uygun çözüm bulunamadı.")