# -*- coding: utf-8 -*-
"""CVRP1_gurobi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oU16vroBezcQlDd9S6TBJEMoB4qhQ7Kf
"""

import gurobipy as gp
from gurobipy import GRB

# ----------------------------
# DATA
# ----------------------------
n = 13  # total nodes (depot + 12 customers)
K = 4   # number of vehicles
C = 6000  # vehicle capacity

# Cost matrix (from EDGE_WEIGHT_SECTION)
cost = [
    [0, 9, 14, 21, 23, 22, 25, 32, 36, 38, 42, 50, 52],
    [9, 0, 5, 12, 22, 21, 24, 31, 35, 37, 41, 49, 51],
    [14, 5, 0, 7, 17, 16, 23, 26, 30, 36, 36, 44, 46],
    [21, 12, 7, 0, 10, 21, 30, 27, 37, 43, 31, 37, 39],
    [23, 22, 17, 10, 0, 9, 19, 28, 25, 35, 41, 29, 31],
    [22, 21, 16, 21, 9, 0, 9, 10, 16, 22, 20, 28, 30],
    [25, 24, 23, 30, 19, 9, 0, 7, 11, 13, 17, 25, 27],
    [32, 31, 26, 27, 28, 10, 7, 0, 6, 6, 14, 16, 12],
    [36, 35, 30, 37, 25, 16, 11, 6, 0, 6, 12, 20, 8],
    [38, 37, 36, 43, 35, 22, 13, 6, 6, 0, 10, 10, 10],
    [42, 41, 36, 31, 41, 20, 17, 14, 12, 10, 0, 8, 10],
    [50, 49, 44, 37, 29, 28, 25, 16, 20, 10, 8, 0, 10],
    [52, 51, 46, 39, 31, 30, 27, 12, 8, 10, 10, 10, 0]
]

# Customer demands
demand = [0, 1200, 1700, 1500, 1400, 1700, 1400, 1200, 1900, 1800, 1600, 1700, 1100]

# ----------------------------
# MODEL
# ----------------------------
m = gp.Model("CVRP1")

# Decision variables: x[i,j] = 1 if a vehicle travels from i to j
x = m.addVars(n, n, vtype=GRB.BINARY, name="x")

# u[i] for MTZ constraints
u = m.addVars(n, vtype=GRB.CONTINUOUS, name="u")

# Objective: minimize total cost
m.setObjective(gp.quicksum(cost[i][j] * x[i,j] for i in range(n) for j in range(n) if i != j), GRB.MINIMIZE)

# Constraints
# Each customer must be visited exactly once (enter and leave once)
for i in range(1, n):
    m.addConstr(gp.quicksum(x[i,j] for j in range(n) if j != i) == 1)
    m.addConstr(gp.quicksum(x[j,i] for j in range(n) if j != i) == 1)

# The number of routes starting and ending at the depot equals K
m.addConstr(gp.quicksum(x[0,j] for j in range(1,n)) == K)
m.addConstr(gp.quicksum(x[i,0] for i in range(1,n)) == K)

# MTZ capacity constraints
for i in range(1, n):
    m.addConstr(u[i] >= demand[i])
    m.addConstr(u[i] <= C)

for i in range(1, n):
    for j in range(1, n):
        if i != j:
            m.addConstr(u[i] - u[j] + C * x[i,j] <= C - demand[j])

# Optimize the model
m.optimize()

# Print the solution
if m.status == GRB.OPTIMAL:
    print(f"Optimal cost: {m.objVal}")
    for i in range(n):
        for j in range(n):
            if i != j and x[i,j].X > 0.5:
                print(f"{i} -> {j}")