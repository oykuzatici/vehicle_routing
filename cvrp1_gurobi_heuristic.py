# -*- coding: utf-8 -*-
"""cvrp1_gurobi_heuristic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F2GPIdqWAuh0qPTm1aDbFpEDI7yemHv0
"""

# -*- coding: utf-8 -*-
import math
import copy

# -------------------------------------------------
# SABİT PROBLEM VERİSİ (TSPLIB E-n13-k4'ten alındı)
# -------------------------------------------------
# Bu sözlük, tüm problem verilerini tek bir yerde tutar.
PROBLEM_DATA = {
    "n": 13,
    "depot": 0,
    "vehicle_count": 4,
    "vehicle_capacity": 6000,
    "demands": [0, 1200, 1700, 1500, 1400, 1700, 1400, 1200, 1900, 1800, 1600, 1700, 1100],
    "cost_matrix": [] # Aşağıda doldurulacak
}

# Mesafe matrisini oluşturan veriler
_numbers = [
    9, 14, 21, 23, 22, 25, 32, 36, 38, 42, 50, 52, 5, 12, 22, 21, 24, 31, 35, 37, 41, 49, 51,
    7, 17, 16, 23, 26, 30, 36, 36, 44, 46, 10, 21, 30, 27, 37, 43, 31, 37, 39, 19, 28, 25,
    35, 41, 29, 31, 29, 9, 10, 16, 22, 20, 28, 30, 7, 11, 13, 17, 25, 27, 10, 16, 10, 18,
    20, 6, 6, 14, 16, 12, 12, 20, 8, 10, 10
]

def _build_cost_from_lower_row(numbers, n):
    """Verilen düz listeden simetrik maliyet matrisi oluşturur."""
    cost = [[0] * n for _ in range(n)]
    idx = 0
    for i in range(1, n):
        for j in range(i):
            cij = numbers[idx]
            idx += 1
            cost[i][j] = cij
            cost[j][i] = cij
    return cost

# Maliyet matrisini oluşturup ana veri sözlüğüne ekleyelim.
PROBLEM_DATA["cost_matrix"] = _build_cost_from_lower_row(_numbers, PROBLEM_DATA["n"])

# -------------------------------------------------
# HIZLI SEZGİSEL ÇÖZÜCÜ (GUROBI YERİNE)
# -------------------------------------------------
def solve_cvrp_heuristic(problem_data):
    """
    En Yakın Komşu (Nearest Neighbor) sezgisel algoritması ile CVRP'yi çok hızlı çözer.
    Optimal sonuç vermez, ama "yeterince iyi" ve anlık bir sonuç üretir.
    """
    depot = problem_data["depot"]
    costs = problem_data["cost_matrix"]
    demands = problem_data["demands"]
    capacity = problem_data["vehicle_capacity"]
    num_vehicles = problem_data["vehicle_count"]
    
    num_customers = problem_data["n"] - 1
    customers = [i for i in range(problem_data["n"]) if i != depot]
    
    visited = {c: False for c in customers}
    routes = []
    total_distance = 0
    
    for _ in range(num_vehicles):
        if all(visited.values()):
            break
            
        route = [depot]
        route_distance = 0
        route_load = 0
        last_node = depot
        
        while True:
            best_dist = float('inf')
            best_customer = -1
            
            # Ziyaret edilmemiş ve kapasiteyi aşmayan en yakın müşteriyi bul
            for customer in customers:
                if not visited[customer] and route_load + demands[customer] <= capacity:
                    dist = costs[last_node][customer]
                    if dist < best_dist:
                        best_dist = dist
                        best_customer = customer
            
            if best_customer != -1:
                route.append(best_customer)
                route_load += demands[best_customer]
                route_distance += best_dist
                last_node = best_customer
                visited[best_customer] = True
            else:
                # Eklenecek uygun müşteri kalmadıysa rotayı bitir
                break
        
        # Rotayı depoda bitir
        route.append(depot)
        route_distance += costs[last_node][depot]
        
        if len(route) > 2: # Sadece depodan çıkıp dönen boş rotaları ekleme
            routes.append(route)
            total_distance += route_distance
            
    # Eğer ziyaret edilmemiş müşteri kaldıysa (kapasite/araç yetersizliği)
    unvisited = [c for c, v in visited.items() if not v]

    return {
        "routes": routes,
        "total_distance": total_distance,
        "unvisited_customers": unvisited
    }